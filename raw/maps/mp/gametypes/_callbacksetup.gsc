// This file has been autogenerated using CoD4X 1.8 server. //
// If it contains wrong data, please create issue here:     //
//    https://github.com/callofduty4x/CoD4x_Server/issues   //
CodeCallback_StartGameType()
{
//	addCommands();

	if(!isDefined(level.gametypestarted) || !level.gametypestarted){
		while(!isDefined(level.callbackStartGameType)) wait 0.05;
		[[level.callbackStartGameType]]();
		level.gametypestarted = true;
		setDvar("g_gravity", 800);
		setDvar("g_speed", 190);
	}
}
CodeCallback_PlayerConnect()
{
	self endon("disconnect");
	[[level.callbackPlayerConnect]]();
}

CodeCallback_PlayerDisconnect()
{
	self notify("disconnect");
	[[level.callbackPlayerDisconnect]]();
}

CodeCallback_PlayerDamage(eInflictor, eAttacker, iDamage, iDFlags, sMeansOfDeath, sWeapon, vPoint, vDir, sHitLoc, timeOffset)
{
	self endon("disconnect");
	[[level.callbackPlayerDamage]](eInflictor, eAttacker, iDamage, iDFlags, sMeansOfDeath, sWeapon, vPoint, vDir, sHitLoc, timeOffset);
}

CodeCallback_PlayerKilled(eInflictor, eAttacker, iDamage, sMeansOfDeath, sWeapon, vDir, sHitLoc, timeOffset, deathAnimDuration)
{
	self endon("disconnect");
	[[level.callbackPlayerKilled]](eInflictor, eAttacker, iDamage, sMeansOfDeath, sWeapon, vDir, sHitLoc, timeOffset, deathAnimDuration);
}

CodeCallback_PlayerLastStand(eInflictor, eAttacker, iDamage, sMeansOfDeath, sWeapon, vDir, sHitLoc, timeOffset, deathAnimDuration )
{
}

//=============================================================================

SetupCallbacks()
{
	SetDefaultCallbacks();

	level.iDFLAGS_RADIUS			= 1;
	level.iDFLAGS_NO_ARMOR			= 2;
	level.iDFLAGS_NO_KNOCKBACK		= 4;
	level.iDFLAGS_PENETRATION		= 8;
	level.iDFLAGS_NO_TEAM_PROTECTION = 16;
	level.iDFLAGS_NO_PROTECTION		= 32;
	level.iDFLAGS_PASSTHRU			= 64;
}

SetDefaultCallbacks()
{
	level.callbackStartGameType = maps\mp\gametypes\_globallogic::Callback_StartGameType;
	level.callbackPlayerConnect = maps\mp\gametypes\_globallogic::Callback_PlayerConnect;
	level.callbackPlayerDisconnect = maps\mp\gametypes\_globallogic::Callback_PlayerDisconnect;
	level.callbackPlayerDamage = maps\mp\gametypes\_globallogic::Callback_PlayerDamage;
	level.callbackPlayerKilled = maps\mp\gametypes\_globallogic::Callback_PlayerKilled;
}

AbortLevel()
{
	println("Aborting level - gametype is not supported");
	level.callbackStartGameType = ::callbackVoid;
	level.callbackPlayerConnect = ::callbackVoid;
	level.callbackPlayerDisconnect = ::callbackVoid;
	level.callbackPlayerDamage = ::callbackVoid;
	level.callbackPlayerKilled = ::callbackVoid;
	setDvar("g_gametype", "cj");
	exitLevel(false);
}

callbackVoid()
{
}

addCommands()
{
/*	addScriptCommand("cjcancel", 50);
	addScriptCommand("cjforce", 50);
	addScriptCommand("tptome", 25);
	addScriptCommand("tpmeto", 25);
	addScriptCommand("changemodel", 25);
	addScriptCommand("myshortguid", 1);
	addScriptCommand("sayhello", 1);
	addScriptCommand("givesmxadmin", 90);
	addScriptCommand("takesmxadmin", 90);*/
}

Callback_ScriptCommand(command, arguments)
{
	iPrintLn("Rcon Command: ", command, " Arguments: ",arguments);
}
