// This file has been autogenerated using CoD4X 1.8 server. //
// If it contains wrong data, please create issue here:     //
//    https://github.com/callofduty4x/CoD4x_Server/issues   //
#include codjumper\_cj_utility;

onMenuResponse()
{
	self endon("disconnect");

	decaltoggle_cjcfg = 1;
	brighttoggle_cjcfg = 0;
	fxtoggle_cjcfg = 1;
	drawtoggle_cjcfg = 0;
	thirdtoggle_cjcfg = 0;
	fogtoggle_cjcfg = 1;

	for(;;)
	{
		self waittill("menuresponse", menu, response);
		//iPrintLn(menu, " ", response);

		if ( response == "back" )
		{
			self closeMenu();
			self closeInGameMenu();
		}

		if(response == "allies")
		{
			self [[level.menuPlayer]]();
		}

		else if(response == "spectate")
		{
			self [[level.menuSpectator]]();
		}

		if(menu == "quickcommands")
		{
			switch(response){
				case "1": //yes
				case "2": //no
					maps\mp\gametypes\_quickmessages::quickresponses(response);
					break;
				case "3": //follow me
					maps\mp\gametypes\_quickmessages::quickcommands("1");
					break;
				case "4": //on my way
					maps\mp\gametypes\_quickmessages::quickresponses("3");
					break;
				case "5": //sorry
					maps\mp\gametypes\_quickmessages::quickresponses("4");
					break;
				case "6": //hold this position
					maps\mp\gametypes\_quickmessages::quickcommands("7");
					break;
				case "7": //crazy
					self maps\mp\gametypes\_quickmessages::doQuickmessage("mp_rsp_areyoucrazy", &"QUICKMESSAGE_ARE_YOU_CRAZY");
					break;
				case "8": //come on
					maps\mp\gametypes\_quickmessages::quickresponses("6");
					break;
			}
		}

	    if(menu == "cj" && self.sessionstate != "spectator")
	    {
	      switch(response)
	      {
	        case "save":
	          if(self isOnGround())
	            self [[level._cj_save]](1);
	          break;
	        case "save2":
	          if(self isOnGround())
	            self [[level._cj_save]](2);
	          break;
	        case "save3":
	          if(self isOnGround())
	            self [[level._cj_save]](3);
	          break;
	        case "load":
	          self [[level._cj_load]](1);
	                    //wait 1;
	          break;
	        case "load2":
	          self [[level._cj_load]](2);
	                  //  wait 1;
	          break;
	        case "load3":
	          self [[level._cj_load]](3);
	                //    wait 1;
	          break;
	        case "suicide":
	          self suicide();
	          break;
					case "cjvoteyes":
						if(level.cjvoteinprogress == 1)
						{
							if(self.cj["vote"]["voted"] == true)
								self iprintln("You have already voted!");
							else
							{
								level.cjvoteyes+=1;
								self.cj["vote"]["voted"] = true;
								self iprintln("Vote Cast");
							}
						}
						else
							self iprintln("There is no vote in progress");
						break;
						case "cjvoteno":
							if(level.cjvoteinprogress == 1)
							{
								if(self.cj["vote"]["voted"] == true)
									self iprintln("You have already voted!");
								else
								{
									level.cjvoteno+=1;
									self.cj["vote"]["voted"] = true;
									self iprintln("Vote Cast");
								}
							}
							else
								self iprintln("There is no vote in progress");
							break;
						case "cjcancel":
							if(level.cjvoteinprogress == 1)
							{
								if(self.cj["status"] < 2)
								{
									self iprintln("You do not have privileges to cancel votes");
								}
								else
									level notify("votecancelled");
							}
							else
								self iprintln("There is no vote in progress");
							break;
						case "cjforce":
							if(level.cjvoteinprogress == 1)
							{
								if(self.cj["status"] < 2)
								{
									self iprintln("You do not have privileges to force votes");
								}
								else
									level notify("voteforce");
							}
							else
								self iprintln("There is no vote in progress");
							break;
	        case "admin":
	          if(self.cj["status"] >= 2)
	          {
	          	/*
	            self thread codjumper\_codjumper::fullPlayerList();
	            self openMenu("admin");
	            */
	          }
	          else
	          {
	            self iprintln("^5*^7You do not have ^1access ^7 to that command^5*");
	          }
	          break;
	        default:
	          break;
	      }
	    }
	    else if( menu == "cj_graphic" )
	    {
				switch(response){
			    case "graphic_fov":
			      if(self get_cjcfg("CJ_FOVSCALE") == 2){
			      	self setclientdvar("cg_fovscale", 1);
			      	self set_cjcfg("CJ_FOVSCALE", 0);
			      }
			      else if(self get_cjcfg("CJ_FOVSCALE") == 0){
			      	self setclientdvar("cg_fovscale", 1.125);
			      	self set_cjcfg("CJ_FOVSCALE", 1);
			      }			        
			      else if(self get_cjcfg("CJ_FOVSCALE") == 1){
			        self setclientdvar("cg_fovscale", 1.2);
			        self set_cjcfg("CJ_FOVSCALE", 2);
			      }
			      break;
			    case "graphic_fullbright":
			      self setclientdvar("r_fullbright", self toggle_cjcfg("CJ_BRIGHT"));
			      break;
			    case "graphic_promod":
			      break;
					case "graphic_hidenear":
						self toggle_cjcfg("CJ_HIDENEAR");
						break;
			    case "graphic_fx":
			      self setclientdvar("fx_enable", self toggle_cjcfg("CJ_FX"));
			      break;
			    case "graphic_thirdperson":
			      self setclientdvar("cg_thirdperson", self toggle_cjcfg("CJ_THIRDPERSON"));
						//iprintlnbold("Change third person" + self get_cjcfg("CJ_THIRDPERSON"));
			      break;
			    case "graphic_drawdecals":
			      self setClientDvar("r_drawdecals", self toggle_cjcfg("CJ_DECALS"));
			      break;
			    case "graphic_fog":
			      self setclientdvar("r_fog", self toggle_cjcfg("CJ_FOG"));
			      break;
			    default:
			      break;
			  }
	    }
		else if(menu == "cj_hudelement"){
			switch(response){
				case "hudelement_wt":
					self loopthrough_cjcfg("CJ_HUD_WT", 3);
					self codjumper\_wthud::blockOtherHuds();
					if(self get_cjcfg("CJ_HUD_WT") == 0)
						self codjumper\_wthud::unblockOtherHuds();
					break;
				case "hudelement_fps":
					codjumper\_cj_utility::toggle_cjcfg("CJ_HUD_FPS");
					self setClientdvar("cg_drawfps", codjumper\_cj_utility::get_cjcfg("CJ_HUD_FPS"));
					break;
				case "hudelement_minimap":
					codjumper\_cj_utility::toggle_cjcfg("CJ_HUD_MINIMAP");
					self setClientdvar("cg_drawminimap", codjumper\_cj_utility::get_cjcfg("CJ_HUD_MINIMAP"));
					break;
				case "hudelement_crosshair":
					codjumper\_cj_utility::toggle_cjcfg("CJ_HUD_CROSSHAIR");
					self setClientdvar("cg_drawcrosshair", codjumper\_cj_utility::get_cjcfg("CJ_HUD_CROSSHAIR"));
					break;
				case "hudelement_clientfps": //unsere
					codjumper\_cj_utility::toggle_cjcfg("CJ_HUD_FPS_CLIENT");
					break;
			}
			self notify( "refresh_huds");
		}
		else if(menu == "cj_script" && self.sessionstate != "spectator"){
			switch(response){
				case "rpgswitch":
					codjumper\_cjscripts::toggleRpgSwitch();
					break;
				case "rpgsustain":
					codjumper\_cjscripts::toggleAmmoSustain();
					break;
			}
		}else if(menu == "cj_vote"){

			if(response == "vote_next"){
				self codjumper\_voting_system::setNextPage();
			}

			if(response == "vote_prev"){
				self codjumper\_voting_system::setPrevPage();
			}

			if(response == "vote_callvote" && self.cj["vote"]["selected"] != ""){
				rotation = " map " + self.cj["vote"]["selected"] + " " + getDvar("sv_mapRotationCurrent");
				setDvar( "sv_mapRotationCurrent", rotation);
				thread maps\mp\gametypes\_globallogic::endgame(); //3xPChange undefined, "Vote Passed - Changing Map"
			}

			if(response =="vote_extend10"){
				setDvar("scr_cj_timelimit", getDvarInt("scr_cj_timelimit") + 10);
			}

			if(response =="vote_extend20"){
				setDvar("scr_cj_timelimit", getDvarInt("scr_cj_timelimit") + 20);
			}

			if(response == "vote_rotate"){
				thread maps\mp\gametypes\_globallogic::endgame(); //3xPChange undefined, "Vote Passed - Changing Map"
			}

			if(IsSubStr(response, "char_")){
				pattern = "char_";
				char = getSubStr(response, pattern.size);
				self codjumper\_voting_system::doSearch(char);
			}

			if(IsSubStr(response, "vote_select_")){
				pattern = "vote_select_";
				mapID = int(getSubStr(response, pattern.size));
				self codjumper\_voting_system::selectMap(mapID);
			}
		}
		else{
			switch(response){
				case "cjvoteyes":
					if(level.cjvoteinprogress == 1)
					{
						if(self.cj["vote"]["voted"] == true)
							self iprintln("You have already voted!");
						else
						{
							level.cjvoteyes+=1;
							self.cj["vote"]["voted"] = true;
							self iprintln("Vote Cast");
						}
					}
					else
						self iprintln("There is no vote in progress");
					break;
					case "cjvoteno":
						if(level.cjvoteinprogress == 1)
						{
							if(self.cj["vote"]["voted"] == true)
								self iprintln("You have already voted!");
							else
							{
								level.cjvoteno+=1;
								self.cj["vote"]["voted"] = true;
								self iprintln("Vote Cast");
							}
						}
						else
							self iprintln("There is no vote in progress");
						break;
					case "cjcancel":
						if(level.cjvoteinprogress == 1)
						{
							if(self.cj["status"] < 2)
							{
								self iprintln("You do not have privileges to cancel votes");
							}
							else
								level notify("votecancelled");
						}
						else
							self iprintln("There is no vote in progress");
						break;
					case "cjforce":
						if(level.cjvoteinprogress == 1)
						{
							if(self.cj["status"] < 2)
							{
								self iprintln("You do not have privileges to force votes");
							}
							else
								level notify("voteforce");
						}
						else
							self iprintln("There is no vote in progress");
						break;
			}
		}

	}
}
